{"version":3,"sources":["utils.js","SnakeBoard.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["range","number","Array","Math","round","keys","SnakeBoard","points","setPoints","useState","parseInt","localStorage","getItem","height","setHeight","width","setWidth","getInitialRows","initialRows","i","j","getObstacles","name","location","map","y","x","ceil","randomObstacle","floor","random","length","randomPosition","position","obstacle","some","setObstacle","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","setIntervalId","isGameOver","setIsGameOver","startGame","setStartGame","useEffect","document","addEventListener","e","keyCode","displayRows","row","className","tile","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","push","head","hitSnake","slice","find","b","hitWall","checkGameOver","pointsList","JSON","parse","prompt","setItem","stringify","window","dispatchEvent","Event","forEach","madonPaa","pop","newRows","displaySnake","placeholder","type","onChange","size","target","value","console","log","error","onClick","Points","getSnakePoints","LeaderBoard","setPointsList","sort","a","App","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27415d34.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\r\n/*\r\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\r\nThanks Dan Abramov for useInterval hook\r\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nThis useInterval Hook sets up an interval and clears it after unmounting.\r\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\r\n*/\r\nexport const useInterval = (callback, delay, setIntervalId) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      setIntervalId(id);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay, setIntervalId]);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const range = (number) => [...Array(Math.round(number)).keys()]\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useInterval, range} from \"./utils\";\r\nimport \"./SnakeBoard.css\";\r\n\r\n\r\nconst SnakeBoard = ({points, setPoints}) => {\r\n  const [height, setHeight] = useState(\r\n    parseInt(localStorage.getItem(\"snake-boars-size\")) || 30\r\n  );\r\n  const [width, setWidth] = useState(\r\n    parseInt(localStorage.getItem(\"snake-boars-size\")) || 30\r\n  );\r\n  const getInitialRows = () => {\r\n    var initialRows = [];\r\n    for (var i = 0; i < height; i++) {\r\n      initialRows[i] = [];\r\n      for (var j = 0; j < width; j++) {\r\n        initialRows[i][j] = \"blank\";\r\n    }\r\n  }\r\n  return initialRows\r\n};\r\n\r\nconst getObstacles = [\r\n  {name: 'tyhjä', location: []},\r\n  {\r\n    name: 'keski',\r\n    location: range(width * 0.60).map(\r\n      (y) => ({x: Math.round(height/2), y: y+Math.ceil(width*0.2)})\r\n    )\r\n  },\r\n  {\r\n  name: 'reunat',\r\n    location: [\r\n      ...range(width).map(x => ({x, y: 0})),\r\n      ...range(width).map(x => ({x, y: width - 1})),\r\n      ...range(height).map(y => ({x: 0, y})),\r\n      ...range(height).map(y => ({x: height - 1, y}))\r\n    ]\r\n  },\r\n  {\r\n    name: \"oma\",\r\n    location: []\r\n  }\r\n];\r\n\r\n\r\nconst randomObstacle = () =>\r\n  getObstacles[Math.floor(Math.random() * getObstacles.length)];\r\n\r\n\r\n  const randomPosition = () => {\r\n    const position = {\r\n      x: Math.floor(Math.random() * width),\r\n      y: Math.floor(Math.random() * height)\r\n    };\r\n    if (obstacle.location.some(({x,y}) => position.x === x && position.y === y)) {\r\n      return randomPosition()\r\n    }\r\n    return position;\r\n  };\r\n\r\n\r\n  const [obstacle, setObstacle] = useState(randomObstacle())\r\n  const [rows, setRows] = useState(getInitialRows);\r\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\r\n  const [direction, setDirection] = useState(\"right\");\r\n  const [food, setFood] = useState(randomPosition);\r\n  const [intervalId, setIntervalId] = useState();\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [startGame, setStartGame] = useState(null);\r\n\r\n\r\nuseEffect(\r\n  () => {\r\n    if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\r\n      setObstacle(randomObstacle());\r\n      setRows(getInitialRows());\r\n      setFood(randomPosition());\r\n    }\r\n  },\r\n  [width, height]\r\n);\r\n\r\n\r\n\r\n\r\nconst changeDirectionWithKeys = (e) => {\r\n  const {keyCode} = e;\r\n  switch(keyCode) {\r\n    case 37:\r\n      setDirection(\"left\");\r\n      break;\r\n    case 38:\r\n      setDirection(\"top\");\r\n      break;\r\n    case 39:\r\n      setDirection(\"right\");\r\n      break;\r\n    case 40:\r\n      setDirection(\"bottom\");\r\n      break;\r\n    default:\r\n    break;\r\n  }\r\n}\r\ndocument.addEventListener(\"keydown\", changeDirectionWithKeys);\r\n\r\n  const displayRows = rows.map((row, i) => (\r\n    <div className=\"Snake-row\" key = {i}>\r\n      {row.map((tile, j) => (\r\n        <div className={`tile ${tile}`} key={'${i}-${j}'} />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  const displaySnake = () => {\r\n    const newRows = getInitialRows();\r\n    snake.forEach(tile => {\r\n      newRows[tile.x][tile.y] = \"snake\";\r\n    });\r\n    newRows[food.x][food.y] = \"food\";\r\n    obstacle.location.forEach(tile => {newRows[tile.x][tile.y] = 'obstacle'})\r\n    setRows(newRows);\r\n  };\r\n\r\nconst checkGameOver = () => {\r\n  const head = snake[0];\r\n  const body = snake.slice(1, -1);\r\n  const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\r\n  const hitWall = obstacle.location.some(({x,y}) => head.x === x && head.y === y)\r\n  return hitSnake || hitWall;\r\n};\r\n\r\n\r\n  const moveSnake = () => {\r\n    if (!startGame) return;\r\n    const newSnake = [];\r\n    switch (direction) {\r\n      case \"right\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\r\n        break;\r\n      case \"left\":\r\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\r\n        break;\r\n      case \"top\":\r\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\r\n        break;\r\n      case \"bottom\":\r\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\nif (checkGameOver()) {\r\n  setIsGameOver(true);\r\n  clearInterval(intervalId);\r\n  const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n  const name = prompt('Peli päättyi! Anna nimimerkkisi:');\r\n    pointsList.push({name, points});\r\n    localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\r\n    window.dispatchEvent(new Event(\"storage\"));\r\n}\r\n\r\n\r\n\r\n\r\n        // Lisätään madolle joka askeleella uusi pala,\r\n        // joka poistetaan jos mato ei saa tällä askeleella ruokaa\r\n        snake.forEach(tile => {\r\n          newSnake.push(tile);\r\n        });\r\n        // Tarkistetaan saako mato ruuan kiinni\r\n        const madonPaa = snake[0];\r\n        if (madonPaa.x === food.x && madonPaa.y === food.y) {\r\n          setFood(randomPosition);\r\n          setPoints(points + 1);\r\n        } else {\r\n          newSnake.pop();\r\n        }\r\n\r\n    setSnake(newSnake);\r\n    displaySnake();\r\n  };\r\n\r\n  useInterval(moveSnake, 150, setIntervalId);\r\n\r\n  return(\r\n  <div className=\"Snake-board\">\r\n    {!startGame &&(\r\n      <>\r\n        <div>Pelilaudan koko on nyt {width} ruutua.</div>\r\n        <div>Aseta halutessasi uusi pelilaudan koko:</div>\r\n        <input\r\n          className=\"Board-size\"\r\n          placeholder=\"Koko 10-100\"\r\n          type=\"number\"\r\n          onChange={ e => {\r\n            const size = parseInt(e.target.value);\r\n            if (size <= 100 && size >= 10) {\r\n              console.log(\"OK\", size);\r\n              setWidth(size);\r\n              setHeight(size);\r\n              localStorage.setItem(\"snake-board-size\", size);\r\n            } else {\r\n              console.error(\"Ei hyvä\", size);\r\n            }\r\n          }}\r\n\r\n          />\r\n        <button className=\"start\" onClick={setStartGame}>\r\n          Aloita peli\r\n        </button>\r\n        </>\r\n    )}\r\n    {displayRows}\r\n    {isGameOver && <div className=\"Game-over\">Game over!</div>}\r\n  </div>\r\n      );\r\n};\r\n\r\nexport default SnakeBoard;\r\n","import React from \"react\";\r\nimport \"./Points.css\"\r\n\r\nconst Points = ({points}) => {\r\n  return <div className=\"Points\">{points} pistettä</div>;\r\n};\r\n\r\nexport default Points;\r\n","import React, {useState} from \"react\";\r\nimport \"./LeaderBoard.css\";\r\n\r\nconst getSnakePoints = () =>\r\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\r\n\r\nconst LeaderBoard = () => {\r\n  const [pointsList, setPointsList] = useState(getSnakePoints());\r\n\r\nwindow.addEventListener(\"storage\", () => {\r\n  setPointsList(getSnakePoints());\r\n});\r\n\r\nconst sortedPointsList = pointsList.sort((a,b) => b - a);\r\n\r\n  return (\r\n    <div className=\"LeaderBoard\">\r\n      <div className=\"LeaderBoard-header\">Top 5</div>\r\n      <div className=\"LeaderBoard-points\">pisteet</div>\r\n      { pointsList\r\n        .sort((a, b) => b.points - a.points)\r\n        .slice(0, 5)\r\n        .map((points, i) => (\r\n        <div key ={`${points.points}-${i}`}>\r\n          {points.name} {points.points}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport SnakeBoard from \"./SnakeBoard\";\nimport Points from \"./Points\";\nimport LeaderBoard from \"./LeaderBoard\";\n\nfunction App() {\n  const [points, setPoints] = useState(0);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Matopeli</header>\n      <Points points={points} />\n      <SnakeBoard points={points} setPoints={setPoints} />\n      <button onClick={() => window.location.reload()}>Uusi peli</button>\n      <LeaderBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}